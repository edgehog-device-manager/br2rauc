From 899079ed91746a11e8c5093f8dc3c1d716d71228 Mon Sep 17 00:00:00 2001
From: Leonardo Amorim <lam@vizrt.com>
Date: Thu, 7 Apr 2022 17:01:17 -0300
Subject: [PATCH 2/3] arm: rpi: copy rpi fw modified fdt settings to u-boot
 loaded fdt

The closed source RPI firmware modifies several entries in the
device-tree that are important for proper boot. The complete list
of these entries can be found at:

https://forums.raspberrypi.com/viewtopic.php?p=1974233&hilit=firmware+device+tree+dma+ranges#p1974233

The function ft_board_setup() was modified so that if u-boot has
loaded a fdt that is different than the rpi fw fdt, then
it will copy all those important nodes and properties
created and modified by the rpi fw to the u-boot loaded fdt
blob.

Signed-off-by: Leonardo Amorim <lam@vizrt.com>
---
 board/raspberrypi/rpi/rpi.c | 246 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 246 insertions(+)

diff --git a/board/raspberrypi/rpi/rpi.c b/board/raspberrypi/rpi/rpi.c
index 17b8108cc8..4d93117494 100644
--- a/board/raspberrypi/rpi/rpi.c
+++ b/board/raspberrypi/rpi/rpi.c
@@ -25,9 +25,12 @@
 #endif
 #include <watchdog.h>
 #include <dm/pinctrl.h>
+#include <stdbool.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
+#define MAX_LEVEL	32		/* how deeply nested we will go */
+
 /* Assigned in lowlevel_init.S
  * Push the variable into the .data section so that it
  * does not get cleared later.
@@ -80,6 +83,12 @@ struct rpi_model {
 	bool has_onboard_eth;
 };
 
+struct rpi_fdt_entries {
+	const char *nodename;
+	unsigned int num_prop;
+	const char *props[6];
+};
+
 static const struct rpi_model rpi_model_unknown = {
 	"Unknown model",
 	DTB_DIR "bcm283x-rpi-other.dtb",
@@ -262,6 +271,70 @@ static const struct rpi_model rpi_models_old_scheme[] = {
 	},
 };
 
+/*
+ * The closed source Rpi firmware modifies several device-tree entries before
+ * booting the Linux Kernel. Those entries are important for proper boot
+ * (e.g.: dma-ranges) or proper operation (e.g.: random number seeds) of the
+ * system. When the U-Boot loads a device-tree different from the Rpi
+ * firmware loaded device tree, this device-tree loaded needs to be modified
+ * by those required entries.
+ * So the struct below has a list of node manipulations done by the Rpi
+ * firmware.
+ * For more information, please check: https://bit.ly/3xeqaGE
+ */
+static const struct rpi_fdt_entries rpi_fw_fdt_entries[] =
+{
+	{
+		.nodename = "/chosen",
+		.num_prop = 3,
+		.props = {
+			"rng-seed",
+			"kaslr-seed",
+			"rpi-boardrev-ext",
+		}
+	},
+	{
+		.nodename = "/chosen/bootloader",
+		.num_prop = 6,
+		.props = {
+			"boot-mode",
+			"version",
+			"capabilities",
+			"update-timestamp",
+			"build-timestamp",
+			"partition",
+		},
+	},
+	{
+		.nodename = "/emmc2bus",
+		.num_prop = 1,
+		.props = {
+			"dma-ranges",
+		},
+	},
+	{
+		.nodename = "/scb/pcie",
+		.num_prop = 1,
+		.props = {
+			"dma-ranges",
+		},
+	},
+	{
+		.nodename = "/scb/ethernet",
+		.num_prop = 1,
+		.props = {
+			"local-mac-address",
+		}
+	},
+	{
+		.nodename = "/memory",
+		.num_prop = 1,
+		.props = {
+			"reg",
+		}
+	}
+};
+
 static uint32_t revision;
 static uint32_t rev_scheme;
 static uint32_t rev_type;
@@ -504,10 +577,183 @@ void *board_fdt_blob_setup(int *err)
 	return (void *)fw_dtb_pointer;
 }
 
+static int ft_board_setup_copy_prop(struct fdt_header * fdt,
+				    struct fdt_header * fw_fdt,
+				    int nodeoffset,
+				    int fw_nodeoffset,
+				    const char * propname)
+{
+ 	int ret;		/* temporaraly stores return codes */
+	const struct fdt_property *fdt_prop;	/* fw fdt property structure */
+	const struct fdt_property *fw_fdt_prop; /* u-boot fdt property struct */
+	int len;		/* length of the property */
+	int fw_len;		/* firmware property len */
+	const void *nodep;	/* u-boot fdt property data pointer */
+	const void *fw_nodep;	/* fw fdt property data pointer */
+
+	fw_fdt_prop = fdt_get_property(fw_fdt, fw_nodeoffset, propname,
+					&fw_len);
+	if (fw_len < 0)	{
+		printf("libfdt fdt_get_property(): %s\n",
+				fdt_strerror(fw_len));
+		return 1;
+	}
+	fw_nodep = fw_fdt_prop->data;
+	fdt_prop = fdt_get_property(fdt, nodeoffset, propname,
+					&len);
+	nodep = fdt_prop->data;
+	/*
+	 * Verify if the property exists in the node, if not
+	 * creates it. Otherwise, verify also if the fw_fdt node
+	 * property data has the same value as the node property
+	 * that has been checked.
+	 */
+	if (len < 0 && len != -FDT_ERR_NOTFOUND) {
+		printf ("libfdt fdt_get_property(): %s\n",
+			fdt_strerror(len));
+		return 1;
+	} else if (len == -FDT_ERR_NOTFOUND ||
+			fw_len != len ||
+			memcmp(fw_nodep, nodep, len) != 0) {
+		ret = fdt_setprop(fdt, nodeoffset,
+				propname, fw_nodep, fw_len);
+		if (ret < 0) {
+			printf("libfdt fdt_setprop(): %s\n",
+					fdt_strerror(ret));
+			return 1;
+		}
+	}
+	else if (len < 0) {
+		printf ("libfdt fdt_getprop(): %s\n",
+			fdt_strerror(len));
+		return 1;
+	}
+
+	return 0;
+}
+
+static int ft_board_setup_copy_fw_fdt_settings(struct fdt_header * fdt)
+{
+	int ret;		/* stores return codes */
+	int entry_num;		/* actual entry number when iterating */
+	int prop_num;		/* actual property number when iterating */
+	int nodeoffset;		/* node offset from libfdt */
+	int fw_nodeoffset;	/* firmware node offset */
+	int fw_parentoffset;	/* firmware parent node offset */
+	char full_fw_path[50];	/* firmware node full path */
+	const char * fw_path;	/* firmware node name */
+	int len;		/* auxiliary array's length variable */
+	struct fdt_header * fw_fdt = (struct fdt_header *)fw_dtb_pointer;
+	const char * prop;
+
+	/*
+	 * If the u-boot fdt size is lower than fw_fdt size than it should
+	 * be readjusted to support the new/modified entries.
+	 */
+	if(fdt_totalsize(fw_fdt) > fdt_totalsize(fdt)) {
+		ret = fdt_shrink_to_minimum(fdt, fdt_totalsize(fw_fdt) -
+				fdt_totalsize(fdt));
+		if (ret < 0) {
+			printf("Could not resize fdt!\n");
+			return 1;
+		}
+	}
+
+	for (entry_num = 0;
+		entry_num < ARRAY_SIZE(rpi_fw_fdt_entries);
+		entry_num++)
+	{
+		nodeoffset = fdt_path_offset(fdt,
+				rpi_fw_fdt_entries[entry_num].nodename);
+		fw_nodeoffset = fdt_path_offset(fw_fdt,
+				rpi_fw_fdt_entries[entry_num].nodename);
+		if (fw_nodeoffset == -FDT_ERR_NOTFOUND) {
+			/*
+			 * If node was not find in fw fdt just jump to
+			 * the next one.
+			 */
+			continue;
+		} else if (fw_nodeoffset < 0) {
+			/* Something bad happened. */
+			printf("libfdt fdt_path_offset() returned %s\n",
+				fdt_strerror(nodeoffset));
+			return 1;
+		}
+
+		while (nodeoffset == -FDT_ERR_NOTFOUND) {
+			/* The fw fdt node was not find in u-boot fdt and it
+			 * must be created.
+			 * First find the fw node parent offset.
+			 */
+			fw_parentoffset = fdt_parent_offset(fw_fdt,
+							    fw_nodeoffset);
+			if (fw_parentoffset < 0) {
+				printf("libfdt fdt_parent_offset returnd %s\n",
+					fdt_strerror(fw_parentoffset));
+				return 1;
+			}
+			/* Get firmware node parent offset full path */
+			if(fdt_get_path(fw_fdt, fw_parentoffset,
+					full_fw_path,
+					sizeof(full_fw_path)) < 0) {
+				printf("libfdt fdt_get_name returned %s\n",
+					fdt_strerror(len));
+				return 1;
+			}
+			/*
+			 * Try to find nodeoffset in u-boot loaded fdt that
+			 * corresponds to parent node. If not found keep
+			 * iterating.
+			 */
+			nodeoffset = fdt_path_offset(fdt, full_fw_path);
+			if (nodeoffset < 0)
+				continue;
+			/*
+			 * The parent node was find in u-boot loaded fdt.
+			 * Now try to add to it the missing node.
+			 */
+			fw_path = fdt_get_name(fw_fdt, fw_nodeoffset,
+					&len);
+			if (len < 0) {
+				printf("libfdt fdt_get_name returned %s\n",
+					fdt_strerror(len));
+				return 1;
+			}
+			nodeoffset = fdt_add_subnode(fdt, nodeoffset,
+							fw_path);
+			if (nodeoffset < 0) {
+				printf("Could not create node %s!\n", fw_path);
+				printf("libfdt fdt_add_subnode returned %s\n",
+					fdt_strerror(nodeoffset));
+				return 1;
+			}
+			break;
+		}
+		for(prop_num = 0; prop_num <
+				rpi_fw_fdt_entries[entry_num].num_prop;
+				prop_num++)
+		{
+			prop = rpi_fw_fdt_entries[entry_num].props[prop_num];
+			ret = ft_board_setup_copy_prop(fdt, fw_fdt, nodeoffset,
+						       fw_nodeoffset, prop);
+			if (ret != 0)
+				return ret;
+		}
+	}
+	return 0;
+}
+
 int ft_board_setup(void *blob, struct bd_info *bd)
 {
 	int node;
 
+	/*
+	 * If the u-boot loaded fdt is different than the firmware fdt
+	 * then some settings must be copied from the fw fdt to the u-boot fdt.
+	 */
+	if (((unsigned long) blob) != fw_dtb_pointer)
+		ft_board_setup_copy_fw_fdt_settings((struct fdt_header *)blob);
+
 	node = fdt_node_offset_by_compatible(blob, -1, "simple-framebuffer");
 	if (node < 0)
 		fdt_simplefb_add_node(blob);
-- 
2.11.0

